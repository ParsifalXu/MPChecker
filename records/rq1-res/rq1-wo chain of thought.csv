"INFO (lib, sha, issue_sha)",Consistency? 1yesï¼›0no,Note,Human label,LLM output
"""lib"": ""scikit-learn"",
        ""sha"": ""395761a76397a560303f00d3db24a50a00ca11ed"",
        ""issue_sha"": ""395761a76397a560303f00d3db24a50a00ca11ed""",1,,"constraints: ""(strategy = 'uniform') -> (sample_weight != 'None')"",",   Logical Format: (strategy = 'uniform') -> !(sample_weight = 'use').
"""lib"": ""scikit-learn"",
        ""sha"": ""131109b0037ec71e4a4f262b888e198d58e38f24"",
        ""issue_sha"": ""395761a76397a560303f00d3db24a50a00ca11ed"",",0,miss,"constraints: ""(strategy = 'quantile') -> (sample_weight != 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""483fafe5d1a27446a8f05a0d9bb3762de47b1618"",
        ""issue_sha"": ""10997c94fd19f999b3d257b137f7722af0bd6fd8"",",1,,"constraints: ""(with_mean = 'False') -> (mean_ = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""10997c94fd19f999b3d257b137f7722af0bd6fd8"",
        ""issue_sha"": ""10997c94fd19f999b3d257b137f7722af0bd6fd8"",",1,,"constraints: ""((with_mean = 'False') ^ (with_std = 'False')) -> (mean_ = 'None')"",",
" ""lib"": ""scikit-learn"",
        ""sha"": ""767d3555a51a4d9279ca47c9426df8b6418da8ce"",
        ""issue_sha"": ""8409b877fdf3212cd9ed65c7868202961a777a20"",",0,miss,"constraints: ""(n_features_to_select = 'warn') -> (tol != 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""8409b877fdf3212cd9ed65c7868202961a777a20"",
        ""issue_sha"": ""8409b877fdf3212cd9ed65c7868202961a777a20"",",1,,"constraints: ""(n_features_to_select = 'auto') -> (tol != 'None')"",",Logical Format: (n_features_to_select = 'auto') -> (tol = 'enabled')
"""lib"": ""scikit-learn"",
        ""sha"": ""7e8d3c505baafa45bd94d9e28ee3d35141ff91c4"",
        ""issue_sha"": ""451f2121eab19dd25c337192a89d8c1582664d89"",",1,,"constraints: ""(multi_class = 'ovo') -> (average = 'None')"",","Constraint Number: 1
Text Constraint: ""Note: multiclass ROC AUC currently only handles the 'macro' and 'weighted' averages. For multiples targets, `average=None` is only implemented for `multi_class='ovo'` and `average='micro'` is only implemented for `multi_class='ovr'`.""
Logical Format: ((average = 'macro' || average = 'weighted') -> (multi_class != 'raise')) ^ ((average = 'None') -> (multi_class = 'ovo')) ^ ((average = 'micro') -> (multi_class = 'ovr'))"
"""lib"": ""scikit-learn"",
        ""sha"": ""451f2121eab19dd25c337192a89d8c1582664d89"",
        ""issue_sha"": ""451f2121eab19dd25c337192a89d8c1582664d89"",",1,,"constraints: ""(multi_class = 'ovr') -> (average = 'None')"",","Text Constraint: ""average:{'micro', 'macro', 'samples', 'weighted'} or None, default='macro' If ``None``, the scores for each class are returned. Otherwise, this determines the type of averaging performed on the data. Note: multiclass ROC AUC currently only handles the 'macro' and 'weighted' averages. For multiclass targets, `average=None` is only implemented for `multi_class='ovr'` and `average='micro'` is only implemented for `multi_class='ovr'`.""
Logical Format: ((average = 'None') -> (return = 'scores for each class')) ^ ((average != 'None') -> (return = 'type of averaging')) ^ ((average = 'None' ^ multi_class = 'ovr') || (average = 'micro' ^ multi_class = 'ovr'))"
"""lib"": ""scikit-learn"",
        ""sha"": ""07bc459be26c7d83d5c980553a853b136ca19c71"",
        ""issue_sha"": ""beea7838cc8ec61c78255bd9c8b400997e30db32"",",1,,"constraints: ""(store_cv_values = 'True') -> (cv_values_ != 'None')"",","Text Constraint: ""store_cv_values:bool, default=False Flag indicating if the cross-validation values corresponding to each alpha should be stored in the ``cv_values_`` attribute (see below). This flag is only compatible with ``cv=None`` (i.e. using Leave-One-Out Cross-Validation).""
Logical Format: (store_cv_values ^ cv = 'None') -> (cv_values_ = 'store')"
"""lib"": ""scikit-learn"",
        ""sha"": ""a0ba256dbe9380b5d2cf9cee133482fc87768267"",
        ""issue_sha"": ""a0ba256dbe9380b5d2cf9cee133482fc87768267"",",1,,"constraints: ""(bootstrap = 'True') -> (oob_score != 'None')"",","Text Constraint: ""oob_score:bool, default=False Whether to use out-of-bag samples to estimate the generalization error. Only available if bootstrap=True.""
Logical Format: (oob_score) -> (bootstrap)."
"""lib"": ""scikit-learn"",
        ""sha"": ""7404a82891ef82c525ec61c76090f12424670a44"",
        ""issue_sha"": ""7404a82891ef82c525ec61c76090f12424670a44"",",1,,"constraints: ""(code_init != 'None') ^ (dict_init != 'None')"",","Text Constraint: ""dict_init:ndarray of shape (n_components, n_features), default=None Initial value for the dictionary for warm restart scenarios. Only used if `code_init` and `dict_init` are not None.""
   Logical Format: ((dict_init = 'ndarray') ^ (shape = '(n_components, n_features)') ^ (default = 'None')) -> ((code_init != 'None') ^ (dict_init != 'None'))"
"""lib"": ""scikit-learn"",
        ""sha"": ""1e46db669318fe20458d7cf135f6107e19e90970"",
        ""issue_sha"": ""1e46db669318fe20458d7cf135f6107e19e90970"",",1,,"constraints: ""(with_std = 'False') -> (scale_ = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""b5d63e34746ec273c1cbc5992a0477198a22f8be"",
        ""issue_sha"": ""b5d63e34746ec273c1cbc5992a0477198a22f8be"",",1,,"constraints: ""(n_nonzero_coefs_ = 'None') ^ (tol = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""53fea53c6f44580738feb6d890f55d7de2fe8cc6"",
        ""issue_sha"": ""53fea53c6f44580738feb6d890f55d7de2fe8cc6"",",1,,"constraints: ""(features = 'missing-only') -> (error_on_new != 'None')"",","Text Constraint: ""error_on_new:bool, default=True If True, transform will raise an error when there are features with missing values in transform that have no missing values in fit. This is applicable only when `features='missing-only'`.""
Logical Format: (error_on_new = True) -> (features = 'missing-only')"
"""lib"": ""scikit-learn"",
        ""sha"": ""5147fd09c6a063188efde444f47bd006fa5f95f0"",
        ""issue_sha"": ""5147fd09c6a063188efde444f47bd006fa5f95f0"",",1,,"constraints: ""(is_saga = 'True') -> (n_samples != 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""b513081c658317eabafd713d6d5d18f7a5a30a73"",
        ""issue_sha"": ""b513081c658317eabafd713d6d5d18f7a5a30a73"",",1,,"constraints: ""(affinity = 'nearest_neighbors') -> (n_jobs = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""b513081c658317eabafd713d6d5d18f7a5a30a73"",
        ""issue_sha"": ""b513081c658317eabafd713d6d5d18f7a5a30a73"",",1,,"constraints: ""(affinity = 'precomputed_nearest_neighbors') -> (n_jobs = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""fdce26a61b5e388ee0871f5cb90ec24afc61c074"",
        ""issue_sha"": ""fdce26a61b5e388ee0871f5cb90ec24afc61c074"",",1,,"constraints: ""(criterion = 'k_best') -> (k_best = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""20509fb2bcfea6c0d8ccd72535a3289f61c08bb0"",
        ""issue_sha"": ""20509fb2bcfea6c0d8ccd72535a3289f61c08bb0"",",1,,"constraints: ""(add_indicator = 'False') -> (indicator_ = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""07a9dc93af13849e0521e94981fb5a215500b095"",
        ""issue_sha"": ""07a9dc93af13849e0521e94981fb5a215500b095"",",0,miss,"constraints: ""(add_indicator = 'True') -> (copy = 'False')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""07a9dc93af13849e0521e94981fb5a215500b095"",
        ""issue_sha"": ""07a9dc93af13849e0521e94981fb5a215500b095"",",1,,"constraints: ""(strategy = 'constant') -> (fill_value = 'used')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""3cde262274a9187fe16c6aeccdcdf9fc433f0fb2"",
        ""issue_sha"": ""3cde262274a9187fe16c6aeccdcdf9fc433f0fb2""",1,,"constraints: ""(y >= 0) -> (loss = 'poisson')"",","Text Constraint: ""The loss function to use in the boosting process. Note that the ""least squares"" and ""poisson"" losses actually implement ""half least squares loss"" and ""half poisson deviance"" to simplify the computation of the gradient. Furthermore, ""poisson"" loss internally uses a log-link and requires ``y >= 0``.""
Logical Format: ((loss = 'least_squares' || loss = 'poisson') -> (gradient = 'simplified')) ^ (loss = 'poisson' -> (y >= 0))"
"""lib"": ""scikit-learn"",
        ""sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",
        ""issue_sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",",1,,"constraints: ""(early_stopping = 'True') -> (validation_fraction = 'exist')"",","Text Constraint: ""validation_fraction:float, default=0.1 The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True.""
Logical Format: (early_stopping = True) -> ((type(validation_fraction) = 'float') ^ (0 <= validation_fraction <= 1))"
"""lib"": ""scikit-learn"",
        ""sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",
        ""issue_sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",",0,miss,"constraints: ""(batch_size = 'auto') -> batch_size=min(200, n_samples)"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",
        ""issue_sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",",1,,"constraints: ""(solver = 'sgd' || solver = 'adam') -> (learning_rate = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",
        ""issue_sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",",1,,"constraints: ""(solver = 'adam') -> (beta_1 = 'exist')"",","Text Constraint: ""beta_1:float, default=0.9 Exponential decay rate for estimates of first moment vector in adam, should be in [0, 1). Only used when solver='adam'.""
Logical Format: (solver = 'adam') -> ((type(beta_1) = 'float') ^ (0 <= beta_1 < 1))"
"""lib"": ""scikit-learn"",
        ""sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",
        ""issue_sha"": ""007d11a49f2ad6ffc64aa302565b7b361b1b51b2"",",1,,"constraints: ""(solver = 'adam') -> (epsilon = 'exist')"",","Text Constraint: ""epsilon:float, default=1e-8 Value for numerical stability in adam. Only used when solver='adam'.""
Logical Format: (solver = 'adam') -> (type(epsilon) = 'float')"
"""lib"": ""scikit-learn"",
        ""sha"": ""c9d223ccc58e2569b8e67f1d0217dd57a93ec07f"",
        ""issue_sha"": ""bc91f01e541de34adf084b07d5154db15cab9b58"",",0,miss,"constraints: ""(solver = 'liblinear') -> (penalty != 'None')"",","Text Constraint: ""dual:bool, default=False Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.""
Logical Format: ((penalty = 'l2') ^ (solver = 'liblinear')) -> (dual = 'True') || (n_samples > n_features) -> (dual = 'False')"
"""lib"": ""scikit-learn"",
        ""sha"": ""c9d223ccc58e2569b8e67f1d0217dd57a93ec07f"",
        ""issue_sha"": ""bc91f01e541de34adf084b07d5154db15cab9b58"",",0,miss,"constraints: ""(solver = 'saga') -> (penalty = 'elasticnet')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""c9d223ccc58e2569b8e67f1d0217dd57a93ec07f"",
        ""issue_sha"": ""7ed61a24feb4ffde0bee9342acf4a58e3f946a61"",",1,,"constraints: ""(solver = 'liblinear') -> (multi_class != 'multinomial')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""7fa2e6e2734b590d96e62d5932c648a9c1002f34"",
        ""issue_sha"": ""7fa2e6e2734b590d96e62d5932c648a9c1002f34"",",1,,"constraints: ""(assign_labels = 'kmeans') -> (n_init != 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""49ec6192326fbe13b347abd9cafeed8e78725df7"",
        ""issue_sha"": ""49ec6192326fbe13b347abd9cafeed8e78725df7"",",1,,"constraints: ""(svd_method = 'randomized') -> (iterated_power != 'None')"",",
" ""lib"": ""scikit-learn"",
        ""sha"": ""896d4fad106c8f1d745923d544b44a0707103aa2"",
        ""issue_sha"": ""896d4fad106c8f1d745923d544b44a0707103aa2"",",1,,"constraints: ""(analyzer = 'word') ^ (token_pattern != 'None')"",","Text Constraint: ""Regular expression denoting what constitutes a ""token"", only used if ``analyzer == 'word'``.""
Logical Format: (analyzer = 'word') -> (token_pattern = 'used')"
"""lib"": ""scikit-learn"",
        ""sha"": ""e7d2a8041bbceb5b11fbb72281a8486ef53347d2"",
        ""issue_sha"": ""e7d2a8041bbceb5b11fbb72281a8486ef53347d2"",",1,,"constraints: ""!((panelty = 'l1') ^ (loss = 'hinge'))"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""5c4b1bb23192a137ac22ced229c50d6b69859ac6"",
        ""issue_sha"": ""5c4b1bb23192a137ac22ced229c50d6b69859ac6"",",1,,"constraints: ""(multi_class = 'crammer_singer') ^ ((loss = 'ignore') ^ (penalty = 'ignore') ^ (dual = 'ignore'))"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",
        ""issue_sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",",1,,"constraints: ""(algorithm = 'lasso_cd') -> (max_iter = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",
        ""issue_sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",",1,,"constraints: ""(algorithm = 'lasso_lars') -> (max_iter = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",
        ""issue_sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",",1,,"constraints: ""(algorithm = 'lasso_cd') -> (init != 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",
        ""issue_sha"": ""a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c"",",1,,"constraints: ""(method = 'threshold') -> (gram = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""598ed4cbf906e4e39f25c7d4016932cbc0659585"",
        ""issue_sha"": ""598ed4cbf906e4e39f25c7d4016932cbc0659585"",",0,incorrect,"constraints: ""(algorithm = 'omp') -> (n_nonzero_coefs = 'exist')"",","Text Constraint: ""Number of nonzero coefficients to target in each column of the solution. This is only used by `algorithm='lars'` and `algorithm='omp'` and is overridden by `alpha` in the `omp` case.""
Logical Format: ((algorithm = 'lars' || algorithm = 'omp') ^ !(alpha = 'None')) -> !(n_nonzero_coefs = 'None')"
"""lib"": ""scikit-learn"",
        ""sha"": ""598ed4cbf906e4e39f25c7d4016932cbc0659585"",
        ""issue_sha"": ""598ed4cbf906e4e39f25c7d4016932cbc0659585"",",0,incorrect,"constraints: ""(algorithm = 'lars') -> (n_nonzero_coefs = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""e4aab357e990e661113e6da97c5c7e939917daf2"",
        ""issue_sha"": ""e4aab357e990e661113e6da97c5c7e939917daf2"",",1,,"constraints: ""!(kernel = 'rbf' || kernel = 'poly' || kernel = 'sigmoid') -> (gamma = 'ignore')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""e4aab357e990e661113e6da97c5c7e939917daf2"",
        ""issue_sha"": ""e4aab357e990e661113e6da97c5c7e939917daf2"",",1,,"constraints: ""(kernel = 'poly') -> (degree = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""683af6c6b65a7943c7fc28144d4b53e7888c0133"",
        ""issue_sha"": ""683af6c6b65a7943c7fc28144d4b53e7888c0133"",",1,,"constraints: ""(cov_init = 'None') -> (emp_cov = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""999f288ef486697e307de0f461033118389013ca"",
        ""issue_sha"": ""999f288ef486697e307de0f461033118389013ca"",",1,,"constraints: ""(mode = 'cd') -> (enet_tol = 'exist')"",","Text Constraint: ""enet_tol:float, default=1e-4 The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode='cd'. Range is (0, inf].""
Logical Format: ((mode = 'cd') -> (enet_tol > 0))"
"""lib"": ""scikit-learn"",
        ""sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",
        ""issue_sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",",1,,"constraints: ""(eigen_solver = 'dense') -> (max_iter != 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",
        ""issue_sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",",1,,"constraints: ""(eigen_solver = 'dense') -> (tol != 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",
        ""issue_sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",",1,,"constraints: ""(method = 'modified') -> (modified_tol != 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",
        ""issue_sha"": ""c115ed715a32a628c77440253a6e3af502e1098d"",",1,,"constraints: ""(method = 'hessian') -> (hessian_tol != 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""b3dca3d025bdc48c2ef07ea1de78082714e10e71"",
        ""issue_sha"": ""b3dca3d025bdc48c2ef07ea1de78082714e10e71"",",1,,"constraints: ""(svd_solver = 'arpack') -> (random_state = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""62ce1bad329c59420e1f72a6e7a2635c9b1df265"",
        ""issue_sha"": ""62ce1bad329c59420e1f72a6e7a2635c9b1df265"",",0,incorrect,"constraints: ""(eval_gradient = 'True') -> (theta != 'None')"",","2. Text Constraint: ""If True, the gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta is returned additionally. Note that gradient computation is not supported for non-binary classification. If True, theta must not be None.""
Logical Format: (eval_gradient = 'True') -> (!(theta = 'None') ^ gradient_computation = 'supported for binary classification')."
"""lib"": ""scikit-learn"",
        ""sha"": ""5c9957764ac3837967f6769167effed39365c5e7"",
        ""issue_sha"": ""5c9957764ac3837967f6769167effed39365c5e7""",1,,"constraints: ""(shuffle = 'True') -> (random_state = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""dd93e0106162983421975faed17800cb83463680"",
        ""issue_sha"": ""dd93e0106162983421975faed17800cb83463680"",",1,,"constraints: ""(penalty = 'elasticnet') -> (l1_ratio = 'exist')"",","13. 
Text Constraint: ""l1_ratio:float, default=None The Elastic-Net mixing parameter, with 0 <= l1_ratio <= 1. Only used if penalty='elasticnet'.""
Logical Format: (penalty = 'elasticnet') -> (0 <= l1_ratio <= 1)"
"""lib"": ""scikit-learn"",
        ""sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",
        ""issue_sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",",0,incorrect,"constraints: ""(solver = 'newton-cg') -> (penalty = 'l2')"",","Text Constraint: ""penalty:str, 'l1' or 'l2', default: 'l2' Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.""
Logical Format: ((solver = 'newton-cg') ^ (solver = 'sag') ^ (solver = 'lbfgs')) -> (penalty = 'l2')"
"""lib"": ""scikit-learn"",
        ""sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",
        ""issue_sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",",0,incorrect,"constraints: ""(solver = 'sag') -> (penalty = 'l2')"",","Text Constraint: ""penalty:str, 'l1' or 'l2', default: 'l2' Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.""
Logical Format: ((solver = 'newton-cg') ^ (solver = 'sag') ^ (solver = 'lbfgs')) -> (penalty = 'l2')"
"""lib"": ""scikit-learn"",
        ""sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",
        ""issue_sha"": ""06bf797c0deabe2a2f166d19abbd0c305da4d123"",",0,incorrect,"constraints: ""(solver = 'lbfgs') -> (penalty = 'l2')"",","Text Constraint: ""penalty:str, 'l1' or 'l2', default: 'l2' Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.""
Logical Format: ((solver = 'newton-cg') ^ (solver = 'sag') ^ (solver = 'lbfgs')) -> (penalty = 'l2')"
"""lib"": ""scikit-learn"",
        ""sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",
        ""issue_sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",",1,,"constraints: ""(distance_threshold != 'None') -> (n_clusters = 'None')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",
        ""issue_sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",",1,,"constraints: ""(linkage = 'ward') -> (affinity = 'euclidean')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",
        ""issue_sha"": ""893a4d45595d7bcc30dc56bd450a3cc3d8c920bc"",",1,,"constraints: ""(distance_threshold != 'None') -> (compute_full_tree = 'True')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""a59562d414a8dbd4afb33092daf102c62f9897ad"",
        ""issue_sha"": ""a59562d414a8dbd4afb33092daf102c62f9897ad"",",0,miss,"constraints: ""(subsample < 1) -> (oob_improvement_ = 'exist')"",",
" ""lib"": ""scikit-learn"",
        ""sha"": ""7fa117be216c889e34f5f79fd8479c0de2d47337"",
        ""issue_sha"": ""7fa117be216c889e34f5f79fd8479c0de2d47337"",",1,,"constraints: ""(whiten = 'True') -> (mean_ = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""7fa117be216c889e34f5f79fd8479c0de2d47337"",
        ""issue_sha"": ""7fa117be216c889e34f5f79fd8479c0de2d47337"",",1,,"constraints: ""(whiten = 'True') -> (whitening_ = 'exist')"",",
"""lib"": ""scikit-learn"",
        ""sha"": ""fb8721a0cec24b6ea2208ecce4fd9b4eeddfcefc"",
        ""issue_sha"": ""fb8721a0cec24b6ea2208ecce4fd9b4eeddfcefc"",",0,incorrect,"constraints: ""(cluster_method = 'dbscan') -> (eps = 'exist')"",","Text Constraint: ""eps:float, optional (default=None) The maximum distance between two samples for one to be considered as in the neighborhood of the other. By default it assumes the same value as ``max_eps``. Used only when ``cluster_method='dbscan'``.""
Logical Format: (cluster_method = 'dbscan') -> ((distance_between_two_samples <= eps) -> (samples = 'in the neighborhood'))."
"""lib"": ""numpy"",
        ""sha"": ""dce08c3e7eacf27ca79db3ddf3962675f7a0ef9e"",
        ""issue_sha"": ""dce08c3e7eacf27ca79db3ddf3962675f7a0ef9e"",",1,,"constraints: ""(s != 'None') -> (axes != 'None')"",",
"""lib"": ""numpy"",
        ""sha"": ""75dbbea7d7111c151498722c0c2811cee86d34ff"",
        ""issue_sha"": ""75dbbea7d7111c151498722c0c2811cee86d34ff"",",1,,"constraints: ""(kind = 'table') -> (assume_unique = 'no effect')"",",
"""lib"": ""scipy"",
        ""sha"": ""77a8ec1a473c8f471d162d50b76b0b581bbb557c"",
        ""issue_sha"": ""77a8ec1a473c8f471d162d50b76b0b581bbb557c"",",1,,"constraints: ""(norm = 'ortho') -> (orthogonalize = 'True')"",",
"""lib"": ""scipy"",
        ""sha"": ""acac27527df9c8723647512361c581f714fb473a"",
        ""issue_sha"": ""acac27527df9c8723647512361c581f714fb473a"",",1,,"constraints: ""(assume_a = 'gen') -> (lower = 'ignore')"",",
"""lib"": ""scipy"",
        ""sha"": ""256d91882262b0534b80f99f9e023eae011567ed"",
        ""issue_sha"": ""256d91882262b0534b80f99f9e023eae011567ed"",",0,incorrect,"constraints: ""(engine = 'None') -> (seed = 'exist')"",","4. Text Constraint: ""seed:{None, int, `numpy.random.Generator`}, optional Used only if `engine` is None. If `seed` is an int or None, a new `numpy.random.Generator` is created using ``np.random.default_rng(seed)``. If `seed` is already a ``Generator`` instance, then the provided instance is used.""
   Logical Format: ((seed = 'None' || type(seed) = 'int') ^ engine = 'None') -> (type(seed) = 'numpy.random.Generator') ^ (type(seed) = 'numpy.random.Generator' -> use(seed))"
"""lib"": ""scipy"",
        ""sha"": ""b80267e9b44169c1ae4ba691bce1e60b66104cbc"",
        ""issue_sha"": ""b80267e9b44169c1ae4ba691bce1e60b66104cbc"",",1,,"constraints: ""((plot != 'None') ^ (fit = 'True')) -> (rvalue = 'True')"",","Text Constraint: ""If `plot` is provided and `fit` is True, setting `rvalue` to True includes the coefficient of determination on the plot.""
Logical Format: ((plot != 'None') ^ (fit = 'True') ^ (rvalue = 'True')) -> (coefficient_of_determination = 'True')."
"""lib"": ""pandas"",
        ""sha"": ""214ac73ab7de1a3bcd38dcb2630145f831661530"",
        ""issue_sha"": ""214ac73ab7de1a3bcd38dcb2630145f831661530""",1,,"constraints: ""(margins = 'True') -> (aggfunc = 'exist')"",",
"""lib"": ""pandas"",
        ""sha"": ""218ab0930e477337ece6c46d497c14d447352d8a"",
        ""issue_sha"": ""218ab0930e477337ece6c46d497c14d447352d8a"",",1,,"constraints: ""(orient = 'index') -> (columns = 'exist')"",",
"""lib"": ""pandas"",
        ""sha"": ""218ab0930e477337ece6c46d497c14d447352d8a"",
        ""issue_sha"": ""218ab0930e477337ece6c46d497c14d447352d8a"",",1,,"constraints: ""!((orient = 'tight' || orient = 'columns') -> (columns != 'None'))"",",